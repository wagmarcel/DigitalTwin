apiVersion: industry-fusion.com/v1alpha1
kind: flinkpythonudf
metadata:
  name: statetime
spec:
  filename: statetime
  version: v1
  class: |
    try:
        from pyflink.common import Row
        from pyflink.table import AggregateFunction
        from pyflink.table.expressions import call
        from pyflink.table.udf import udaf
        from pyflink.table.expressions import col, lit
        from pyflink.table import DataTypes
    except ImportError:
        class Row():
            def __init__(self, a, b, c, d, e):
                pass
        class AggregateFunction():
            pass


    class statetime(AggregateFunction):

        def create_accumulator(self):
            # statetime, last_state, last_timeInMs, first_state, first_timeInMs
            return Row(None, None, None, None, None)
            pass

        def get_value(self, accumulator):
                return accumulator[0]

        def accumulate(self, accumulator, state, timeInMs):
            if accumulator[1] is None or accumulator[2] is None:
                accumulator[1] = state
                accumulator[2] = timeInMs
            else:
                if accumulator[1] == 1:
                    if accumulator[0] is None:
                        accumulator[0] = timeInMs - accumulator[2]
                    else:
                        accumulator[0] += timeInMs - accumulator[2]
                accumulator[1] = state
                accumulator[2] = timeInMs


        def retract(self, accumulator, state, timeInMs):
            if accumulator[3] is None:
                accumulator[4] = timeInMs
                accumulator[3] = state
            else:
                if accumulator[3] == 1:
                    accumulator[0] -= (timeInMs - accumulator[4])
                accumulator[4] = timeInMs
                accumulator[3] = state
                
        def get_result_type(self):
            return 'BIGINT'
            
        def get_accumulator_type(self):
            return 'ROW<f0 DataTypes.BIGINT, f1 DataTypes.BIGINT>'
---
apiVersion: industry-fusion.com/v1alpha1
kind: flinkpythonudf
metadata:
  name: weightedaverage
spec:
  filename: weightedaverage
  version: v1
  class: |
    from pyflink.common import Row
    from pyflink.table import AggregateFunction, DataTypes, TableEnvironment, EnvironmentSettings
    from pyflink.table.expressions import call
    from pyflink.table.udf import udaf
    from pyflink.table.expressions import col, lit
    from pyflink.table.window import Tumble


    class WeightedAvg(AggregateFunction):

        def create_accumulator(self):
            # Row(sum, count)
            return Row(0, 0)

        def get_value(self, accumulator):
            if accumulator[1] == 0:
                return None
            else:
                return accumulator[0] / accumulator[1]

        def accumulate(self, accumulator, value, weight):
            accumulator[0] += value * weight
            accumulator[1] += weight
        
        def retract(self, accumulator, value, weight):
            accumulator[0] -= value * weight
            accumulator[1] -= weight
            
        def get_result_type(self):
            return 'BIGINT'
            
        def get_accumulator_type(self):
            return 'ROW<f0 BIGINT, f1 BIGINT>'
---
apiVersion: industry-fusion.com/v1alpha1
kind: flinkpythonudf
metadata:
  name: hash
spec:
  filename: hash
  version: v1
  class: |
    from pyflink.table.expressions import call, col
    from pyflink.table import DataTypes, TableEnvironment, EnvironmentSettings
    from pyflink.table.udf import ScalarFunction, udf

    @udf(result_type=DataTypes.BIGINT())
    class HashCode(ScalarFunction):
        def __init__(self):
            self.factor = 12

        def eval(self, s):
            return hash(s) * self.factor

        def __call__(self, s):
            return hash(s) * self.factor